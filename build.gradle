
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'

group = 'it.sagelab'
sourceCompatibility = 1.8
mainClassName = 'it.sagelab.specpro.Main'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
    }
}

repositories {
    mavenCentral()
}


dependencies {
    compile('commons-cli:commons-cli:1.4')
    compile('org.json:json:20171018')
    compile('org.apache.directory.studio:org.apache.commons.io:2.4')
    compile('org.antlr:antlr4:4.7')
    compile('edu.stanford.nlp:stanford-corenlp:3.9.1')
    compile('org.jgrapht:jgrapht-core:1.2.0')
    compile('org.jgrapht:jgrapht-io:1.2.0')
    testCompile('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.2.0')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
}

task updateVersionPropertiesFile() {
    doLast {

        def versionPropsFile = file('src/main/resources/version.properties')

        Properties versionProps = new Properties()
        if (!versionPropsFile.exists()) {
            versionProps['version'] = "0.1.0"
            versionProps['build'] = "0"
            versionProps.store(versionPropsFile.newWriter(), null)
        }

        if (versionPropsFile.canRead()) {
            versionProps.load(new FileInputStream(versionPropsFile))

            def snapshot = true
            def runTasks = gradle.startParameter.taskNames
            if ('release' in runTasks) {
                def v = versionProps['version'].split("\\.")
                v[2] = (v[2].toInteger() + 1).toString();
                versionProps['version'] = v[0] + '.' + v[1] + '.' + v[2];
                snapshot = false
            }
            versionProps['snapshot'] = snapshot ? "True" : "False"
            version = versionProps['version']
            if(snapshot) {
                version += '-SNAPSHOT'
            }

            versionProps['build'] = (versionProps['build'].toInteger() + 1).toString()
            versionProps.store(versionPropsFile.newWriter(), null)
        } else {
            throw new FileNotFoundException("Could not read version.properties!")
        }

    }
}

task release(dependsOn: build) {
    group 'build'
}

processResources {
    dependsOn updateVersionPropertiesFile
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

run {
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

applicationDistribution.from("$projectDir") {
    into ''
    include 'README.md', 'LICENSE', 'ltl2gba_launcher.pl'
}
